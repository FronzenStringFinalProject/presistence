//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "child_quiz_group"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub cid: i32,
    pub gid: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Cid,
    Gid,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Cid,
    Gid,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (i32, i32);
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Children,
    QuizGroups,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Cid => ColumnType::Integer.def(),
            Self::Gid => ColumnType::Integer.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Children => Entity::belongs_to(super::children::Entity)
                .from(Column::Cid)
                .to(super::children::Column::Cid)
                .into(),
            Self::QuizGroups => Entity::belongs_to(super::quiz_groups::Entity)
                .from(Column::Gid)
                .to(super::quiz_groups::Column::Gid)
                .into(),
        }
    }
}

impl Related<super::children::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Children.def()
    }
}

impl Related<super::quiz_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QuizGroups.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
