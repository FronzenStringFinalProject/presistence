//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "quizes"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub qid: i32,
    pub quiz: String,
    pub answer: i32,
    pub group: i32,
    pub diff: f64,
    pub disc: f64,
    pub lambda: f64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Qid,
    Quiz,
    Answer,
    Group,
    Diff,
    Disc,
    Lambda,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Qid,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    AnswerRecord,
    QuizGroups,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Qid => ColumnType::Integer.def(),
            Self::Quiz => ColumnType::String(Some(255u32)).def(),
            Self::Answer => ColumnType::Integer.def(),
            Self::Group => ColumnType::Integer.def(),
            Self::Diff => ColumnType::Double.def(),
            Self::Disc => ColumnType::Double.def(),
            Self::Lambda => ColumnType::Double.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::AnswerRecord => Entity::has_many(super::answer_record::Entity).into(),
            Self::QuizGroups => Entity::belongs_to(super::quiz_groups::Entity)
                .from(Column::Group)
                .to(super::quiz_groups::Column::Gid)
                .into(),
        }
    }
}

impl Related<super::answer_record::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AnswerRecord.def()
    }
}

impl Related<super::quiz_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QuizGroups.def()
    }
}

impl Related<super::children::Entity> for Entity {
    fn to() -> RelationDef {
        super::answer_record::Relation::Children.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::answer_record::Relation::Quizes.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
