//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "quiz"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Serialize, Deserialize)]
pub struct Model {
    pub quiz_id: i32,
    pub diff: f64,
    pub quiz: String,
    pub ans: i32,
    pub level: i32,
    pub disc: Option<f64>,
    pub lambdas: Option<f64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    QuizId,
    Diff,
    Quiz,
    Ans,
    Level,
    Disc,
    Lambdas,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    QuizId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    AnsRecords,
    QuizLevel,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::QuizId => ColumnType::Integer.def(),
            Self::Diff => ColumnType::Double.def(),
            Self::Quiz => ColumnType::String(Some(255u32)).def(),
            Self::Ans => ColumnType::Integer.def(),
            Self::Level => ColumnType::Integer.def(),
            Self::Disc => ColumnType::Double.def().null(),
            Self::Lambdas => ColumnType::Double.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::AnsRecords => Entity::has_many(super::ans_records::Entity).into(),
            Self::QuizLevel => Entity::belongs_to(super::quiz_level::Entity)
                .from(Column::Level)
                .to(super::quiz_level::Column::LevelId)
                .into(),
        }
    }
}

impl Related<super::ans_records::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AnsRecords.def()
    }
}

impl Related<super::quiz_level::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QuizLevel.def()
    }
}

impl Related<super::children::Entity> for Entity {
    fn to() -> RelationDef {
        super::ans_records::Relation::Children.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::ans_records::Relation::Quiz.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
